#include <iostream>
#include <boost\thread\thread.hpp>
#include <pcl\console\parse.h>
#include <pcl\io\pcd_io.h>
#include <pcl\filters\extract_indices.h>
#include <pcl\visualization\pcl_visualizer.h>
#include <pcl\point_types.h>
#include <pcl\sample_consensus\ransac.h>
#include <pcl\sample_consensus\sac_model_sphere.h>
#include <pcl\sample_consensus\sac_model_plane.h>

//可视化
boost::shared_ptr<pcl::visualization::PCLVisualizer> simpleVis(pcl::PointCloud<pcl::PointXYZ>::ConstPtr cloud)
{
	boost::shared_ptr<pcl::visualization::PCLVisualizer> viewer(new pcl::visualization::PCLVisualizer("3D Viewer"));
	//创建视图对象，并给定标题
	viewer->setBackgroundColor(0, 0, 0);
	viewer->addPointCloud<pcl::PointXYZ>(cloud,"sample cloud");//这里要给定代号，以便后面渲染时需要
	viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 3, "sample cloud");
	//viewer->addCoordinateSystem(1.0, "global");
	viewer->initCameraParameters();//初始化相机参数
	return (viewer);
}

//主函数
int 
main(int argc, char ** argv)
{
	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_ptr(new pcl::PointCloud<pcl::PointXYZ>);//存储源点云
	pcl::PointCloud<pcl::PointXYZ>::Ptr final_ptr(new pcl::PointCloud<pcl::PointXYZ>);//存储局内点
	//填充源点云,设置了局内点和局外点
	cloud_ptr->width = 5000;//设置点云数量
	cloud_ptr->height = 1;//生成无序点云
	cloud_ptr->is_dense = false;//设置深度为假
	cloud_ptr->points.resize(cloud_ptr->width*cloud_ptr->height);
	for (size_t i = 0; i < cloud_ptr->points.size(); ++i)
	{
		if (pcl::console::find_argument(argc, argv, "-s") >= 0 || pcl::console::find_argument(argc, argv, "-sf") >= 0)
		{
			//与圆球相关的点云
			cloud_ptr->points[i].x =rand() / (RAND_MAX + 1.0);
			cloud_ptr->points[i].y =rand() / (RAND_MAX + 1.0);
			if (i % 5 == 0)
			{
				cloud_ptr->points[i].z =rand() / (RAND_MAX + 1.0);//此处对应的点为局外点
			}
			else if (i % 2 == 0)
			{
				cloud_ptr->points[i].z = sqrt(1 - (cloud_ptr->points[i].x*cloud_ptr->points[i].x) - 
					(cloud_ptr->points[i].y*cloud_ptr->points[i].y));
			}
			else
			{
				cloud_ptr->points[i].z = -sqrt(1 - (cloud_ptr->points[i].x*cloud_ptr->points[i].x) - 
					(cloud_ptr->points[i].y*cloud_ptr->points[i].y));
			}
		}
		else
		{
			//根据命令行参数，用x+y+z=0设置一部分点云，此时，点云组成菱形平面作为内点
			cloud_ptr->points[i].x = rand() / (RAND_MAX + 1.0);
			cloud_ptr->points[i].y = rand() / (RAND_MAX + 1.0);
			if (i % 2 == 0)
			{
				cloud_ptr->points[i].z = rand() / (RAND_MAX + 1.0);
			}
			else
			{
				cloud_ptr->points[i].z = -1 * (cloud_ptr->points[i].x + cloud_ptr->points[i].y);
			}
		}
	}
	std::vector<int> inliers;//存储局内点集合的点的索引的向量
	//创建随机采样一致性对象
	pcl::SampleConsensusModelSphere<pcl::PointXYZ>::Ptr model_s(new pcl::SampleConsensusModelSphere<pcl::PointXYZ>(cloud_ptr));
	//针对球模型的对象
	pcl::SampleConsensusModelPlane<pcl::PointXYZ>::Ptr model_p(new pcl::SampleConsensusModelPlane<pcl::PointXYZ>(cloud_ptr));
	//针对平面模型的对象，并将点云对象传递给它
	if (pcl::console::find_argument(argc, argv, "-f") >= 0)
	{
		//根据命令行参数，来随机估算对应的平面模型，并存储估计的局内点
		pcl::RandomSampleConsensus<pcl::PointXYZ> ransac(model_p);
		ransac.setDistanceThreshold(0.01);//与平面距离小于0.01的点作为局内点考虑
		ransac.computeModel();//计算
		ransac.getInliers(inliers);//获取局内点索引
	}
	else if (pcl::console::find_argument(argc, argv, "-sf") >= 0)
	{
		//根据命令行参数，来随机估算对应的圆球模型，并存储估计的局内点
		pcl::RandomSampleConsensus<pcl::PointXYZ> ransac(model_s);
		ransac.setDistanceThreshold(0.01);//与球面距离小于0.01的视为局内点
		ransac.computeModel();
		ransac.getInliers(inliers);
	}

	//复制估算模型的所有局内点到final_ptr中，这里用的是点云加索引
	pcl::copyPointCloud<pcl::PointXYZ>(*cloud_ptr, inliers, *final_ptr);
	//创建可视化对象，并加入原始点云或者所有局内点
	boost::shared_ptr<pcl::visualization::PCLVisualizer> viewer;
	if (pcl::console::find_argument(argc, argv, "-f") >= 0 || pcl::console::find_argument(argc, argv, "-sf") >= 0)
	{
		viewer = simpleVis(final_ptr);//显示局内点
	}
	else
	{
		viewer = simpleVis(cloud_ptr);//显示全部点云，未使用模型进行估计
	}
	while (!viewer->wasStopped())//就是没有点击关闭
	{
		viewer->spinOnce(100);
		//ROS消息回调函数，spin调用后不会返回，程序就卡在这里了，spinonce调用后还可以继续执行。程序会不断的调用这两者
		//回调函数必须在调用这两者之后才会执行
		boost::this_thread::sleep(boost::posix_time::microseconds(100000));//线程休息
	}
	return 0;
}
