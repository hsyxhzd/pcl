#include <iostream>
#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/features/normal_3d.h>
#include <pcl/surface/gp3.h>

int 
main(int argc, char ** argv)
{
	//加载数据
	pcl::PointCloud<pcl::PointXYZ>::Ptr cloud_ptr(new pcl::PointCloud<pcl::PointXYZ>);
	pcl::PCLPointCloud2 cloud_blob;
	pcl::io::loadPCDFile("bun0.pcd", cloud_blob);
	pcl::fromPCLPointCloud2(cloud_blob, *cloud_ptr);

	//估计法线
	pcl::PointCloud<pcl::Normal>::Ptr normal_ptr(new pcl::PointCloud<pcl::Normal>);
	pcl::NormalEstimation<pcl::PointXYZ, pcl::Normal> ne;
	pcl::search::KdTree<pcl::PointXYZ>::Ptr tree_ptr(new pcl::search::KdTree<pcl::PointXYZ>);
	tree_ptr->setInputCloud(cloud_ptr);
	ne.setInputCloud(cloud_ptr);
	ne.setSearchMethod(tree_ptr);
	ne.setKSearch(20);//设置k搜索的k=20
	ne.compute(*normal_ptr);

	//创建一个点云，把XYZ点云和法线点云连接在一起
	pcl::PointCloud<pcl::PointNormal>::Ptr cloud_normal_ptr(new pcl::PointCloud<pcl::PointNormal>);
	pcl::concatenateFields(*cloud_ptr, *normal_ptr, *cloud_normal_ptr);//连接字段

	//创建搜索树
	pcl::search::KdTree<pcl::PointNormal>::Ptr tree_ptr2(new pcl::search::KdTree<pcl::PointNormal>);
	tree_ptr2->setInputCloud(cloud_normal_ptr);

	//初始化三角化对象
	pcl::GreedyProjectionTriangulation<pcl::PointNormal> gp3;//定义三角化对象
	pcl::PolygonMesh triangles;//存储最终三角化的网格模型

	gp3.setSearchRadius(0.025);//设置连接两点之间最大的距离
	gp3.setMu(2.5);//设置被样本点搜索其临近点的最远距离为2.5，为了适应点云密度的变化
	gp3.setMaximumNearestNeighbors(100);//设置样本点可搜索的领域个数为100
	gp3.setMaximumSurfaceAngle(M_PI / 4);//设置某点法线方向偏离样本点法线方向的最大角度为45度
	gp3.setMinimumAngle(M_PI / 18);//设置三角化后得到的三角形内角最小角度为10度
	gp3.setMaximumAngle(2 * M_PI / 3);//设置三角化后得到的三角形内角最大角度为120度
	gp3.setNormalConsistency(false);//设置该参数保证法线朝向一致

	//得到结果
	gp3.setInputCloud(cloud_normal_ptr);
	gp3.setSearchMethod(tree_ptr2);
	gp3.reconstruct(triangles);//重建提取三角化

	//附加信息
	std::vector<int> parts = gp3.getPartIDs();
	std::vector<int> states = gp3.getPointStates();

	return 0;
}
//参考pcl官网以及《点云库pcl学习教程》朱德海
